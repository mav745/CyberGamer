/*
client.h - primary header for client
Copyright (C) 2009 Uncle Mike

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
*/

#ifndef CLIENT_H
#define CLIENT_H

#include "mathlib.h"
#include "cdll_int.h"
#include "menu_int.h"
#include "cl_entity.h"
#include "com_model.h"
#include "mod_local.h"
#include "pm_defs.h"
#include "pm_movevars.h"
#include "render_api.h"
#include "cdll_exp.h"
#include "screenfade.h"
#include "protocol.h"
#include "netchan.h"
#include "net_api.h"
#include "world.h"

#define MAX_DEMOS		32
#define MAX_MOVIES		8
#define MAX_CDTRACKS	32
#define MAX_IMAGES		256	// SpriteTextures
#define MAX_EFRAGS		1024
#define MAX_REQUESTS	32

// screenshot types
#define VID_SCREENSHOT	0
#define VID_LEVELSHOT	1
#define VID_MINISHOT	2
#define VID_MAPSHOT		3	// special case for overview layer
#define VID_SNAPSHOT	4	// save screenshot into root dir and no gamma correction

typedef int		sound_t;

//=============================================================================
typedef struct frame_s
{
	// received from server
	double		receivedtime;	// time message was received, or -1
	double		latency;
	double		time;		// server timestamp

	local_state_t	local;		// local client state
	entity_state_t	playerstate[MAX_CLIENTS];
	int		num_entities;
	int		first_entity;	// into the circular cl_packet_entities[]

	qboolean		valid;		// cleared if delta parsing was invalid
} frame_t;

#define CMD_BACKUP		MULTIPLAYER_BACKUP	// allow a lot of command backups for very fast systems
#define CMD_MASK		(CMD_BACKUP - 1)

#define CL_UPDATE_MASK	(CL_UPDATE_BACKUP - 1)
extern int CL_UPDATE_BACKUP;

#define INVALID_HANDLE	0xFFFF		// for XashXT cache system

// the client_t structure is wiped completely at every
// server map change
typedef struct
{
	int		timeoutcount;

	int		servercount;		// server identification for prespawns
	int		validsequence;		// this is the sequence number of the last good
						// world snapshot/update we got.  If this is 0, we can't
						// render a frame yet
	int		parsecount;		// server message counter
	int		parsecountmod;		// modulo with network window
									
	qboolean		video_prepped;		// false if on new level or new ref dll
	qboolean		audio_prepped;		// false if on new level or new snd dll
	qboolean		force_refdef;		// vid has changed, so we can't use a paused refdef

	int		delta_sequence;		// acknowledged sequence number

	double		mtime[2];			// the timestamp of the last two messages


	int		last_incoming_sequence;

	qboolean		force_send_usercmd;
	qboolean		thirdperson;
	qboolean		background;		// not real game, just a background

	uint		checksum;			// for catching cheater maps

	client_data_t	data;			// some clientdata holds

	frame_t		frame;			// received from server
	int		predictcount;		// advances with next clientdata
	frame_t		frames[MULTIPLAYER_BACKUP];	// alloced on svc_serverdata
	usercmd_t		cmds[MULTIPLAYER_BACKUP];	// each mesage will send several old cmds
	local_state_t	predict[MULTIPLAYER_BACKUP];	// local client state

	double		time;			// this is the time value that the client
						// is rendering at.  always <= cls.realtime
						// a lerp point for other data
	double		oldtime;			// previous cl.time, time-oldtime is used
						// to decay light values and smooth step ups

	float		lerpFrac;			// interpolation value
	ref_params_t	refdef;			// shared refdef

	char		serverinfo[MAX_INFO_STRING];
	player_info_t	players[MAX_CLIENTS];
	event_state_t	events;

	// predicting stuff
	vec3_t		predicted_origin;		// generated by CL_PredictMovement
	vec3_t		predicted_viewofs;
	vec3_t		predicted_velocity;
	vec3_t		predicted_punchangle;

	// server state information
	int		playernum;
	int		maxclients;
	int		movemessages;
	int		num_custombeams;			// server beams count

	char		model_precache[MAX_MODELS][CS_SIZE];
	char		sound_precache[MAX_SOUNDS][CS_SIZE];
	char		event_precache[MAX_EVENTS][CS_SIZE];
	lightstyle_t	lightstyles[MAX_LIGHTSTYLES];

	int		sound_index[MAX_SOUNDS];
	int		decal_index[MAX_DECALS];

	cl_entity_t	*world;
	model_t		*worldmodel;			// pointer to world
} client_t;

/*
==================================================================

the client_static_t structure is persistant through an arbitrary number
of server connections

==================================================================
*/
typedef enum
{
	ca_uninitialized = 0,
	ca_disconnected, 	// not talking to a server
	ca_connecting,	// sending request packets to the server
	ca_connected,	// netchan_t established, waiting for svc_serverdata
	ca_active,	// game views should be displayed
	ca_cinematic,	// playing a cinematic, not connected to a server
} connstate_t;

typedef enum
{
	scrshot_inactive,
	scrshot_normal,	// in-game screenshot
	scrshot_snapshot,	// in-game snapshot
	scrshot_plaque,  	// levelshot
	scrshot_savegame,	// saveshot
	scrshot_demoshot,	// for demos preview
	scrshot_envshot,	// cubemap view
	scrshot_skyshot,	// skybox view
	scrshot_mapshot	// overview layer
} scrshot_t;

// client screen state
typedef enum
{
	CL_LOADING = 1,	// draw loading progress-bar
	CL_ACTIVE,	// draw normal hud
	CL_PAUSED,	// pause when active
	CL_CHANGELEVEL,	// draw 'loading' during changelevel
} scrstate_t;

typedef struct
{
	char		name[32];
	int		number;	// svc_ number
	int		size;	// if size == -1, size come from first byte after svcnum
	pfnUserMsgHook	func;	// user-defined function	
} cl_user_message_t;

typedef void (__cdecl *pfnEventHook)( event_args_t *args );

typedef struct
{
	char		name[CS_SIZE];
	word		index;	// event index
	pfnEventHook	func;	// user-defined function
} cl_user_event_t;

typedef struct
{
	int		hFontTexture;		// handle to texture
	wrect_t		fontRc[256];		// rectangles
	byte		charWidths[256];
	int		charHeight;
	qboolean		valid;			// all rectangles are valid
} cl_font_t;

typedef struct
{
	// temp handle
	const model_t	*pSprite;			// pointer to current SpriteTexture

	// scissor test
	int		scissor_x;
	int		scissor_y;
	int		scissor_width;
	int		scissor_height;
	qboolean		scissor_test;
	qboolean		adjust_size;		// allow to adjust scale for fonts

	int		cullMode;			// override CULL FACE from TriAPI

	// holds text color
	rgba_t		textColor;
	rgba_t		spriteColor;
	rgba_t		triColor;

	// crosshair members
	const model_t	*pCrosshair;
	wrect_t		rcCrosshair;
	rgba_t		rgbaCrosshair;
	byte		gammaTable[256];
} client_draw_t;

typedef struct
{
	int		gl_texturenum;	// this is a real texnum

	// scissor test
	int		scissor_x;
	int		scissor_y;
	int		scissor_width;
	int		scissor_height;
	qboolean		scissor_test;

	// holds text color
	rgba_t		textColor;
} gameui_draw_t;

typedef struct
{
	// centerprint stuff
	float		time;
	int		y, lines;
	char		message[2048];
	int		totalWidth;
	int		totalHeight;
} center_print_t;

typedef struct
{
	float		time;
	float		duration;
	float		amplitude;
	float		frequency;
	float		next_shake;
	vec3_t		offset;
	float		angle;
	vec3_t		applied_offset;
	float		applied_angle;
} screen_shake_t;

typedef struct
{
	struct mstudiotex_s	*ptexture;	// array of textures with local copy of remapped textures
	short		numtextures;	// textures count
	short		topcolor;		// cached value
	short		bottomcolor;	// cached value
	model_t		*model;		// for catch model changes
} remap_info_t;

typedef struct
{
	net_response_t		resp;
	net_api_response_func_t	pfnFunc;
	double			timeout;
	double			timesend;	// time when request was sended
	int			flags;	// FNETAPI_MULTIPLE_RESPONSE etc
} net_request_t;

// new versions of client dlls have a sanigle export with all callbacks
typedef void (__cdecl *CL_EXPORT_FUNCS)( void *pv );

typedef struct
{
	void		*hInstance;		// pointer to client.dll
	cldll_func_t	dllFuncs;			// dll exported funcs
	render_interface_t	drawFuncs;		// custom renderer support
	byte		*mempool;			// client edicts pool
	string		mapname;			// map name
	string		maptitle;			// display map title
	string		itemspath;		// path to items description for auto-complete func

	cl_entity_t	*entities;		// dynamically allocated entity array
	cl_entity_t	*static_entities;		// dynamically allocated static entity array
	remap_info_t	**remap_info;		// store local copy of all remap textures for each entity

	int		maxEntities;
	int		maxRemapInfos;		// maxEntities + cl.viewEnt; also used for catch entcount
	int		numStatics;		// actual static entity count

	// movement values from server
	movevars_t	movevars;
	movevars_t	oldmovevars;
	playermove_t	*pmove;			// pmove state

	int		old_trace_hull;		// used by PM_Push\Pop state
	int		oldcount;			// used by PM_Push\Pop state

	vec3_t		player_mins[MAX_MAP_HULLS];	// 4 hulls allowed
	vec3_t		player_maxs[MAX_MAP_HULLS];	// 4 hulls allowed

	cl_user_message_t	msg[MAX_USER_MESSAGES];	// keep static to avoid fragment memory
	cl_user_event_t	*events[MAX_EVENTS];

	string		cdtracks[MAX_CDTRACKS];	// 32 cd-tracks read from cdaudio.txt

	model_t		sprites[MAX_IMAGES];	// client spritetextures
	int		load_sequence;		// for unloading unneeded sprites

	client_draw_t	ds;			// draw2d stuff (hud, weaponmenu etc)
	screenfade_t	fade;			// screen fade
	screen_shake_t	shake;			// screen shake
	center_print_t	centerPrint;		// centerprint variables
	SCREENINFO	scrInfo;			// actual screen info
	ref_overview_t	overView;			// overView params
	rgb_t		palette[256];		// palette used for particle colors

	client_textmessage_t *titles;			// title messages, not network messages
	int		numTitles;

	net_request_t	net_requests[MAX_REQUESTS];	// no reason to keep more

	efrag_t		*free_efrags;		// linked efrags
	cl_entity_t	viewent;			// viewmodel
} clgame_static_t;

typedef struct
{
	void		*hInstance;		// pointer to client.dll
	UI_FUNCTIONS	dllFuncs;			// dll exported funcs
	byte		*mempool;			// client edicts pool

	cl_entity_t	playermodel;		// uiPlayerSetup drawing model
	player_info_t	playerinfo;		// local playerinfo

	gameui_draw_t	ds;			// draw2d stuff (menu images)
	GAMEINFO		gameInfo;			// current gameInfo
	GAMEINFO		*modsInfo[MAX_MODS];	// simplified gameInfo for MainUI

	ui_globalvars_t	*globals;

	qboolean		drawLogo;			// set to TRUE if logo.avi missed or corrupted
	long		logo_xres;
	long		logo_yres;
	float		logo_length;
} menu_static_t;

typedef struct
{
	connstate_t	state;
	qboolean		initialized;
	qboolean		changelevel;		// during changelevel
	qboolean		changedemo;		// during changedemo

	// screen rendering information
	float		disable_screen;		// showing loading plaque between levels
						// or changing rendering dlls
						// if time gets > 30 seconds ahead, break it
	int		disable_servercount;	// when we receive a frame and cl.servercount
						// > cls.disable_servercount, clear disable_screen

	qboolean		draw_changelevel;		// draw changelevel image 'Loading...'

	keydest_t		key_dest;

	byte		*mempool;			// client premamnent pool: edicts etc
	
	int		framecount;
	int		quakePort;		// a 16 bit value that allows quake servers
						// to work around address translating routers
						// g-cont. this port allow many copies of engine in multiplayer game
	// connection information
	string		servername;		// name of server from original connect
	double		connect_time;		// for connection retransmits


	sizebuf_t		datagram;			// unreliable stuff. gets sent in CL_Move about cl_cmdrate times per second.
	byte		datagram_buf[NET_MAX_PAYLOAD];

	netchan_t		netchan;
	int		serverProtocol;		// in case we are doing some kind of version hack
	int		challenge;		// from the server to use for connecting

	float		packet_loss;
	double		packet_loss_recalc_time;

	float		nextcmdtime;		// when can we send the next command packet?                
	int		lastoutgoingcommand;	// sequence number of last outgoing command

	// internal images
	int		fillImage;		// used for emulate FillRGBA to avoid wrong draw-sort
	int		particleImage;		// built-in particle and sparks image
	int		pauseIcon;		// draw 'paused' when game in-pause
	int		loadingBar;		// 'loading' progress bar
	int		glowShell;		// for renderFxGlowShell
	int		tileImage;		// for draw any areas not covered by the refresh
	VHSPRITE		hChromeSprite;		// this is a really HudSprite handle, not texnum!
	cl_font_t		creditsFont;		// shared creditsfont

	int		num_client_entities;	// cl.maxclients * CL_UPDATE_BACKUP * MAX_PACKET_ENTITIES
	int		next_client_entities;	// next client_entity to use
	entity_state_t	*packet_entities;		// [num_client_entities]

	scrshot_t		scrshot_request;		// request for screen shot
	scrshot_t		scrshot_action;		// in-action
	const float	*envshot_vieworg;		// envshot position
	int		envshot_viewsize;		// override cvar
	qboolean		envshot_disable_vis;	// disable VIS on server while makes an envshots
	string		shotname;

	// download info
	int		downloadcount;
	int		downloadfileid;

	// demo loop control
	int		demonum;			// -1 = don't play demos
	int		olddemonum;		// restore playing
	string		demos[MAX_DEMOS];		// when not playing

	// movie playlist
	int		movienum;
	string		movies[MAX_MOVIES];

	// demo recording info must be here, so it isn't clearing on level change
	qboolean		demorecording;
	qboolean		demoplayback;
	qboolean		demowaiting;		// don't record until a non-delta message is received
	qboolean		timedemo;
	string		demoname;			// for demo looping
	double		demotime;			// recording time

	file_t		*demofile;
	file_t		*demoheader;		// contain demo startup info in case we record a demo on this level
} client_static_t;

#ifdef __cplusplus
extern "C" {
#endif

extern client_t		cl;
extern client_static_t	cls;
extern clgame_static_t	clgame;
extern menu_static_t	menu;

#ifdef __cplusplus
}
#endif

//
// cvars
//
extern convar_t	*cl_predict;
extern convar_t	*cl_smooth;
extern convar_t	*cl_showfps;
extern convar_t	*cl_envshot_size;
extern convar_t	*cl_timeout;
extern convar_t	*cl_nodelta;
extern convar_t	*cl_interp;
extern convar_t	*cl_crosshair;
extern convar_t	*cl_testlights;
extern convar_t	*cl_solid_players;
extern convar_t	*cl_idealpitchscale;
extern convar_t	*cl_allow_levelshots;
extern convar_t	*cl_lightstyle_lerping;
extern convar_t	*cl_draw_particles;
extern convar_t	*cl_levelshot_name;
extern convar_t	*cl_draw_beams;
extern convar_t	*scr_centertime;
extern convar_t	*scr_viewsize;
extern convar_t	*scr_download;
extern convar_t	*scr_loading;
extern convar_t	*scr_dark;	// start from dark
extern convar_t	*userinfo;
extern convar_t	*hltv;

//=============================================================================

void __cdecl CL_SetLightstyle( int style, const char* s, float f );
void __cdecl CL_RunLightStyles( void );

void __cdecl CL_AddEntities( void );
void __cdecl CL_DecayLights( void );

//=================================================

void __cdecl CL_PrepVideo( void );
void __cdecl CL_PrepSound( void );

//
// cl_cmds.c
//
void __cdecl CL_Quit_f( void );
void __cdecl CL_ScreenShot_f( void );
void __cdecl CL_SnapShot_f( void );
void __cdecl CL_PlayCDTrack_f( void );
void __cdecl CL_EnvShot_f( void );
void __cdecl CL_SkyShot_f( void );
void __cdecl CL_SaveShot_f( void );
void __cdecl CL_DemoShot_f( void );
void __cdecl CL_LevelShot_f( void );
void __cdecl CL_SetSky_f( void );
void __cdecl SCR_Viewpos_f( void );
void __cdecl SCR_TimeRefresh_f( void );

//
// cl_main.c
//
void __cdecl CL_Init( void );
void __cdecl CL_SendCommand( void );
void __cdecl CL_Disconnect_f( void );
void __cdecl CL_ProcessFile( qboolean successfully_received, const char *filename );
void __cdecl CL_WriteUsercmd( sizebuf_t *msg, int from, int to );
void __cdecl CL_GetChallengePacket( void );
void __cdecl CL_PingServers_f( void );
void __cdecl CL_ClearState( void );

//
// cl_demo.c
//
void __cdecl CL_StartupDemoHeader( void );
void __cdecl CL_DrawDemoRecording( void );
void __cdecl CL_WriteDemoUserCmd( int cmdnumber );
void __cdecl CL_WriteDemoMessage( qboolean startup, int start, sizebuf_t *msg );
void __cdecl CL_WriteDemoUserMessage( const byte *buffer, size_t size );
qboolean __cdecl CL_DemoReadMessage( byte *buffer, size_t *length );
void __cdecl CL_WriteDemoJumpTime( void );
void __cdecl CL_CloseDemoHeader( void );
void __cdecl CL_StopPlayback( void );
void __cdecl CL_StopRecord( void );
void __cdecl CL_PlayDemo_f( void );
void __cdecl CL_StartDemos_f( void );
void __cdecl CL_Demos_f( void );
void __cdecl CL_DeleteDemo_f( void );
void __cdecl CL_Record_f( void );
void __cdecl CL_Stop_f( void );
void __cdecl CL_FreeDemo( void );

//
// cl_events.c
//
void __cdecl CL_ParseEvent( sizebuf_t *msg );
void __cdecl CL_ParseReliableEvent( sizebuf_t *msg );
void __cdecl CL_SetEventIndex( const char *szEvName, int ev_index );
void __cdecl CL_QueueEvent( int flags, int index, float delay, event_args_t *args );
void __cdecl CL_PlaybackEvent( int flags, const edict_t *pInvoker, word eventindex, float delay, float *origin,
	float *angles, float fparam1, float fparam2, int iparam1, int iparam2, int bparam1, int bparam2 );
void __cdecl CL_RegisterEvent( int lastnum, const char *szEvName, pfnEventHook func );
word __cdecl CL_EventIndex( const char *name );
const char *__cdecl CL_IndexEvent( word index );
void __cdecl CL_ResetEvent( event_info_t *ei );
void __cdecl CL_FireEvents( void );

//
// cl_game.c
//
void __cdecl CL_UnloadProgs( void );
qboolean __cdecl CL_LoadProgs( const char *name );
void __cdecl CL_ParseUserMessage( sizebuf_t *msg, int svc_num );
void __cdecl CL_LinkUserMessage( char *pszName, const int svc_num, int iSize );
void __cdecl CL_ParseTextMessage( sizebuf_t *msg );
void __cdecl CL_DrawHUD( int state );
void __cdecl CL_InitEdicts( void );
void __cdecl CL_FreeEdicts( void );
void __cdecl CL_ClearWorld( void );
void __cdecl CL_DrawCenterPrint( void );
void __cdecl CL_FreeEntity( cl_entity_t *pEdict );
void __cdecl CL_CenterPrint( const char *text, float y );
void __cdecl CL_TextMessageParse( byte *pMemFile, int fileSize );
client_textmessage_t *__cdecl CL_TextMessageGet( const char *pName );
int __cdecl pfnDecalIndexFromName( const char *szDecalName );
int __cdecl pfnIndexFromTrace( struct pmtrace_s *pTrace );
int __cdecl CL_FindModelIndex( const char *m );
VHSPRITE __cdecl pfnSPR_Load( const char *szPicName );
VHSPRITE __cdecl pfnSPR_LoadExt( const char *szPicName, uint texFlags );
void __cdecl TextAdjustSize( int *x, int *y, int *w, int *h );
void __cdecl PicAdjustSize( float *x, float *y, float *w, float *h );
void __cdecl CL_PlayerTrace( float *start, float *end, int traceFlags, int ignore_pe, pmtrace_t *tr );
void __cdecl CL_PlayerTraceExt( float *start, float *end, int traceFlags, int (*pfnIgnore)( physent_t *pe ), pmtrace_t *tr );
void __cdecl CL_SetTraceHull( int hull );

_inline cl_entity_t *__cdecl CL_EDICT_NUM( int n )
{
	if(( n >= 0 ) && ( n < clgame.maxEntities ))
		return clgame.entities + n;

	Host_Error( "CL_EDICT_NUM: bad number %i\n", n );
	return NULL;	
}

//
// cl_parse.c
//
void __cdecl CL_ParseServerMessage( sizebuf_t *msg );
void __cdecl CL_ParseTempEntity( sizebuf_t *msg );
qboolean __cdecl CL_DispatchUserMessage( const char *pszName, int iSize, void *pbuf );

//
// cl_scrn.c
//
void __cdecl SCR_VidInit( void );
void __cdecl SCR_TileClear( void );
void __cdecl SCR_AddDirtyPoint( int x, int y );
void __cdecl SCR_InstallParticlePalette( void );
void __cdecl SCR_EndLoadingPlaque( void );
void __cdecl SCR_RebuildGammaTable( void );
void __cdecl SCR_RegisterTextures( void );
void __cdecl SCR_LoadCreditsFont( void );
void __cdecl SCR_MakeScreenShot( void );
void __cdecl SCR_MakeLevelShot( void );
void __cdecl SCR_NetSpeeds( void );
void __cdecl SCR_RSpeeds( void );
void __cdecl SCR_DrawFPS( void );

//
// cl_view.c
//

void __cdecl V_Init (void);
void __cdecl V_Shutdown( void );
qboolean __cdecl V_PreRender( void );
void __cdecl V_PostRender( void );
void __cdecl V_RenderView( void );
void __cdecl V_SetupOverviewState( void );
void __cdecl V_ProcessOverviewCmds( usercmd_t *cmd );
void __cdecl V_MergeOverviewRefdef( ref_params_t *fd );
void __cdecl V_ProcessShowTexturesCmds( usercmd_t *cmd );
void __cdecl V_WriteOverviewScript( void );

//
// cl_pmove.c
//
void __cdecl CL_SetSolidEntities( void );
void __cdecl CL_SetSolidPlayers( int playernum );
void __cdecl CL_InitClientMove( void );
void __cdecl CL_PredictMovement( void );
void __cdecl CL_CheckPredictionError( void );
qboolean __cdecl CL_IsPredicted( void );
int __cdecl CL_TruePointContents( const vec3_t p );
int __cdecl CL_PointContents( const vec3_t p );
int __cdecl CL_WaterEntity( const float *rgflPos );
cl_entity_t *__cdecl CL_GetWaterEntity( const float *rgflPos );
void __cdecl CL_SetupPMove( playermove_t *pmove, clientdata_t *cd, entity_state_t *state, usercmd_t *ucmd );
pmtrace_t __cdecl CL_TraceLine( vec3_t start, vec3_t end, int flags );
void __cdecl CL_ClearPhysEnts( void );

//
// cl_studio.c
//
void __cdecl CL_InitStudioAPI( void );

//
// cl_frame.c
//
void __cdecl CL_ParsePacketEntities( sizebuf_t *msg, qboolean delta );
qboolean __cdecl CL_AddVisibleEntity( cl_entity_t *ent, int entityType );
void __cdecl CL_UpdateStudioVars( cl_entity_t *ent, entity_state_t *newstate, qboolean noInterp );
qboolean __cdecl CL_GetEntitySpatialization( int entnum, vec3_t origin, float *pradius );
void __cdecl CL_UpdateEntityFields( cl_entity_t *ent );
qboolean __cdecl CL_IsPlayerIndex( int idx );

//
// cl_remap.c
//
remap_info_t *__cdecl CL_GetRemapInfoForEntity( cl_entity_t *e );
void __cdecl CL_AllocRemapInfo( int topcolor, int bottomcolor );
void __cdecl CL_FreeRemapInfo( remap_info_t *info );
void __cdecl R_StudioSetRemapColors( int top, int bottom );
void __cdecl CL_UpdateRemapInfo( int topcolor, int bottomcolor );
void __cdecl CL_ClearAllRemaps( void );

//
// cl_tent.c
//
int __cdecl CL_AddEntity( int entityType, cl_entity_t *pEnt );
void __cdecl CL_WeaponAnim( int iAnim, int body );
void __cdecl CL_ClearEffects( void );
void __cdecl CL_ClearEfrags( void );
void __cdecl CL_TestLights( void );
void __cdecl CL_DrawParticlesExternal( const float *vieworg, const float *fwd, const float *rt, const float *up, uint clipFlags );
void __cdecl CL_FireCustomDecal( int textureIndex, int entityIndex, int modelIndex, float *pos, int flags, float scale );
void __cdecl CL_DecalShoot( int textureIndex, int entityIndex, int modelIndex, float *pos, int flags );
void __cdecl CL_PlayerDecal( int textureIndex, int entityIndex, float *pos );
void __cdecl CL_InitParticles( void );
void __cdecl CL_ClearParticles( void );
void __cdecl CL_FreeParticles( void );
void __cdecl CL_DrawParticles( void );
void __cdecl CL_InitTempEnts( void );
void __cdecl CL_ClearTempEnts( void );
void __cdecl CL_FreeTempEnts( void );
void __cdecl CL_AddTempEnts( void );
void __cdecl CL_InitViewBeams( void );
void __cdecl CL_ClearViewBeams( void );
void __cdecl CL_FreeViewBeams( void );
void __cdecl CL_DrawBeams( int fTrans );
void __cdecl CL_AddCustomBeam( cl_entity_t *pEnvBeam );
void __cdecl CL_KillDeadBeams( cl_entity_t *pDeadEntity );
void __cdecl CL_ParseViewBeam( sizebuf_t *msg, int beamType );
void __cdecl CL_RegisterMuzzleFlashes( void );
void __cdecl CL_ReadPointFile_f( void );
void __cdecl CL_ReadLineFile_f( void );

//
// console.c
//
extern convar_t *con_fontsize;
qboolean __cdecl Con_Visible( void );
void __cdecl Con_Init( void );
void __cdecl Con_VidInit( void );
void __cdecl Con_ToggleConsole_f( void );
void __cdecl Con_ClearNotify( void );
void __cdecl Con_DrawDebug( void );
void __cdecl Con_RunConsole( void );
void __cdecl Con_DrawConsole( void );
void __cdecl Con_DrawVersion( void );
void __cdecl Con_DrawStringLen( const char *pText, int *length, int *height );
int __cdecl Con_DrawString( int x, int y, const char *string, rgba_t setColor );
int __cdecl Con_DrawCharacter( int x, int y, int number, rgba_t color );
void __cdecl Con_DrawCharacterLen( int number, int *width, int *height );
void __cdecl Con_DefaultColor( int r, int g, int b );
void __cdecl Con_InvalidateFonts( void );
void __cdecl Con_SetFont( int fontNum );
void __cdecl Con_CharEvent( int key );
void __cdecl Con_RestoreFont( void );
void __cdecl Key_Console( int key );
void __cdecl Key_Message( int key );
void __cdecl Con_Close( void );

//
// s_main.c
//
void __cdecl S_StreamRawSamples( int samples, int rate, int width, int channels, const byte *data );
void __cdecl S_StartBackgroundTrack( const char *intro, const char *loop, long position );
void __cdecl S_StopBackgroundTrack( void );
void __cdecl S_StreamSetPause( int pause );
void __cdecl S_StartStreaming( void );
void __cdecl S_StopStreaming( void );
void __cdecl S_BeginRegistration( void );
sound_t __cdecl S_RegisterSound( const char *sample );
void __cdecl S_EndRegistration( void );
void __cdecl S_RestoreSound( const vec3_t pos, int ent, int chan, sound_t handle, float fvol, float attn, int pitch, int flags, double sample, double end, int wordIndex );
void __cdecl S_StartSound( const vec3_t pos, int ent, int chan, sound_t sfx, float vol, float attn, int pitch, int flags );
void __cdecl S_AmbientSound( const vec3_t pos, int ent, sound_t handle, float fvol, float attn, int pitch, int flags );
void __cdecl S_FadeClientVolume( float fadePercent, float fadeOutSeconds, float holdTime, float fadeInSeconds );
void __cdecl S_FadeMusicVolume( float fadePercent );
void __cdecl S_StartLocalSound( const char *name, float volume, qboolean reliable );
void __cdecl S_RenderFrame( struct ref_params_s *fd );
void __cdecl S_ExtraUpdate( void );

//
// cl_menu.c
//
void __cdecl UI_UnloadProgs( void );
qboolean __cdecl UI_LoadProgs( void );
void __cdecl UI_UpdateMenu( float realtime );
void __cdecl UI_KeyEvent( int key, qboolean down );
void __cdecl UI_MouseMove( int x, int y );
void __cdecl UI_SetActiveMenu( qboolean fActive );
void __cdecl UI_AddServerToList( netadr_t adr, const char *info );
void __cdecl UI_GetCursorPos( int *pos_x, int *pos_y );
void __cdecl UI_SetCursorPos( int pos_x, int pos_y );
void __cdecl UI_ShowCursor( qboolean show );
qboolean __cdecl UI_CreditsActive( void );
void __cdecl UI_CharEvent( int key );
qboolean __cdecl UI_MouseInRect( void );
qboolean __cdecl UI_IsVisible( void );
void __cdecl pfnPIC_Set( HIMAGE hPic, int r, int g, int b, int a );
void __cdecl pfnPIC_Draw( int x, int y, int width, int height, const wrect_t *prc );
void __cdecl pfnPIC_DrawTrans( int x, int y, int width, int height, const wrect_t *prc );
void __cdecl pfnPIC_DrawHoles( int x, int y, int width, int height, const wrect_t *prc );
void __cdecl pfnPIC_DrawAdditive( int x, int y, int width, int height, const wrect_t *prc );

//
// cl_video.c
//
void __cdecl SCR_InitCinematic( void );
void __cdecl SCR_FreeCinematic( void );
qboolean __cdecl SCR_PlayCinematic( const char *name );
qboolean __cdecl SCR_DrawCinematic( void );
qboolean __cdecl SCR_NextMovie( void );
void __cdecl SCR_RunCinematic( void );
void __cdecl SCR_StopCinematic( void );
void __cdecl CL_PlayVideo_f( void );

#endif//CLIENT_H
